From 2f6a9f7ff5ab2796a75f19bdffa4cdb369734c26 Mon Sep 17 00:00:00 2001
From: Robert Nelson <robertcnelson@gmail.com>
Date: Fri, 27 May 2016 12:45:43 -0500
Subject: [PATCH 7/7] Revert "mmc: host: omap_hsmmc: Fix workaround for errata
 i834"

This reverts commit d6d077a7bae88770027757cdfccf10b84dd01b95.

Signed-off-by: Robert Nelson <robertcnelson@gmail.com>
---
 drivers/mmc/host/omap_hsmmc.c | 117 ++++++++++++++++++++----------------------
 1 file changed, 57 insertions(+), 60 deletions(-)

diff --git a/drivers/mmc/host/omap_hsmmc.c b/drivers/mmc/host/omap_hsmmc.c
index d770680..cbd4318 100644
--- a/drivers/mmc/host/omap_hsmmc.c
+++ b/drivers/mmc/host/omap_hsmmc.c
@@ -183,11 +183,6 @@
 #define PSTATE_CLEV		(1 << 24)
 #define PSTATE_DLEV		(0xF << 20)
 
-#define MMC_BLOCK_TRANSFER_TIME_NS(blksz, bus_width, freq)		\
-				   ((unsigned long long)		\
-				   (2 * (((blksz) * NSEC_PER_SEC *	\
-				   (8 / (bus_width))) / (freq))))
-
 /*
  * One controller can have multiple slots, like on some omap boards using
  * omap.c controller driver. Luckily this is not currently done on any known
@@ -252,7 +247,8 @@ struct omap_hsmmc_host {
 	struct	omap_hsmmc_platform_data	*pdata;
 
 	struct timer_list	timer;
-	unsigned long long	data_timeout;
+	unsigned long		data_timeout;
+	unsigned int		need_i834_errata:1;
 
 	struct pinctrl		*pinctrl;
 	struct pinctrl_state	*pinctrl_state;
@@ -663,7 +659,7 @@ static void omap_hsmmc_enable_irq(struct omap_hsmmc_host *host,
 		irq_mask &= ~(BRR_EN | BWR_EN);
 
 	/* Disable timeout for erases or when using software timeout */
-	if (cmd && (cmd->opcode == MMC_ERASE || host->data_timeout))
+	if (cmd && (cmd->opcode == MMC_ERASE || host->need_i834_errata))
 		irq_mask &= ~DTO_EN;
 
 	if (host->flags & CLKEXTFREE_ENABLED)
@@ -756,6 +752,22 @@ static void omap_hsmmc_set_clock(struct omap_hsmmc_host *host)
 		OMAP_HSMMC_WRITE(host->base, HCTL, regval);
 	}
 
+	/*
+	 * DRA7 Errata No i834: When using high speed HS200 and SDR104
+	 * cards, the functional clock for MMC module will be 192MHz.
+	 * At this frequency, the maximum obtainable timeout (DTO =0xE)
+	 * in hardware is (1/192MHz)*2^27 = 700ms. Commands taking longer
+	 * than 700ms will be affected by this small window frame and
+	 * will be timing out frequently even without a genune timeout
+	 * from the card. Workarround for this errata is use a software
+	 * timer instead of hardware timer to provide the delay requested
+	 * by the upper layer
+	 */
+	if (ios->clock == 192000000)
+		host->need_i834_errata = true;
+	else
+		host->need_i834_errata = false;
+
 	omap_hsmmc_start_clock(host);
 }
 
@@ -1280,16 +1292,8 @@ static void omap_hsmmc_do_irq(struct omap_hsmmc_host *host, int status)
 	}
 
 	OMAP_HSMMC_WRITE(host->base, STAT, status);
-	if (end_cmd || ((status & CC_EN) && host->cmd)) {
+	if (end_cmd || ((status & CC_EN) && host->cmd))
 		omap_hsmmc_cmd_done(host, host->cmd);
-		if (host->data_timeout) {
-			unsigned long timeout;
-
-			timeout = jiffies +
-				  nsecs_to_jiffies(host->data_timeout);
-			mod_timer(&host->timer, timeout);
-		}
-	}
 	if ((end_trans || (status & TC_EN)) && host->mrq)
 		omap_hsmmc_xfer_done(host, data);
 }
@@ -1304,18 +1308,16 @@ static irqreturn_t omap_hsmmc_irq(int irq, void *dev_id)
 
 	status = OMAP_HSMMC_READ(host->base, STAT);
 
-	while (status & (INT_EN_MASK | CIRQ_EN)) {
-		/*
-		 * During a successful bulk data transfer command-completion
-		 * interrupt and transfer-completion interrupt will be
-		 * generated, but software-timeout timer should be deleted
-		 * only on non-cc interrupts (transfer complete or error)
-		 */
-		if (host->data_timeout && (status & (~CC_EN))) {
-			del_timer(&host->timer);
-			host->data_timeout = 0;
-		}
+	/*
+	 * During a successful bulk data transfer command-completion
+	 * interrupt and transfer-completion interrupt will be generated,
+	 * but software-timeout timer should be deleted only on non-CC
+	 * interrupts (transfer complete or error)
+	 */
+	if (host->need_i834_errata && (status & (~CC_EN)))
+		del_timer(&host->timer);
 
+	while (status & (INT_EN_MASK | CIRQ_EN)) {
 		if (host->req_in_progress)
 			omap_hsmmc_do_irq(host, status);
 
@@ -1345,7 +1347,6 @@ static void omap_hsmmc_soft_timeout(unsigned long data)
 		omap_hsmmc_xfer_done(host, host->data);
 	else if (host->cmd)
 		omap_hsmmc_cmd_done(host, host->cmd);
-	host->data_timeout = 0;
 }
 
 static void set_sd_bus_power(struct omap_hsmmc_host *host)
@@ -1543,14 +1544,32 @@ static void set_data_timeout(struct omap_hsmmc_host *host,
 {
 	unsigned int timeout, cycle_ns;
 	uint32_t reg, clkd, dto = 0;
-	struct mmc_ios *ios = &host->mmc->ios;
-	struct mmc_data *data = host->mrq->data;
 
 	reg = OMAP_HSMMC_READ(host->base, SYSCTL);
 	clkd = (reg & CLKD_MASK) >> CLKD_SHIFT;
 	if (clkd == 0)
 		clkd = 1;
 
+	if (host->need_i834_errata) {
+		unsigned long delta;
+
+		delta = (timeout_clks / (host->clk_rate / clkd));
+
+		/*
+		 * We should really be using just timeout_ns + delta,
+		 * however during the experiments observed that the transfer
+		 * complete happens after really long time (roughly 3 times
+		 * of the advertised timeout value). With the eMMC card in
+		 * DRA72 EVM, the card advertised 960ms but the (worst case)
+		 * transfer complete came after 2.6 seconds.
+		 */
+		host->data_timeout = 3 * (timeout_ns + delta);
+		if (host->data_timeout < MMC_TIMEOUT_MS * NSEC_PER_MSEC)
+			host->data_timeout = MMC_TIMEOUT_MS * NSEC_PER_MSEC;
+
+		return;
+	}
+
 	cycle_ns = 1000000000 / (host->clk_rate / clkd);
 	timeout = timeout_ns / cycle_ns;
 	timeout += timeout_clks;
@@ -1567,36 +1586,8 @@ static void set_data_timeout(struct omap_hsmmc_host *host,
 			dto -= 13;
 		else
 			dto = 0;
-		if (dto > 14) {
-			/*
-			 * DRA7 Errata No i834: When using high speed HS200 and
-			 * SDR104 cards, the functional clock for MMC module
-			 * will be 192MHz. At this frequency, the maximum
-			 * obtainable timeout (DTO =0xE) in hardware is
-			 * (1/192MHz)*2^27 = 700ms. Commands taking longer than
-			 * 700ms will be affected by this small window frame
-			 * and will be timing out frequently even without a
-			 * genuine timeout from the card. Workaround for
-			 * this errata is use a software timer instead of
-			 * hardware timer to provide the timeout requested
-			 * by the upper layer.
-			 *
-			 * The timeout from the upper layer denotes the delay
-			 * between the end bit of the read command and the
-			 * start bit of the data block and in the case of
-			 * multiple-read operation, they also define the
-			 * typical delay between the end bit of a data
-			 * block and the start bit of next data block.
-			 *
-			 * Calculate the total timeout value for the entire
-			 * transfer to complete from the timeout value given
-			 * by the upper layer.
-			 */
-			host->data_timeout = (data->blocks * (timeout_ns +
-					      MMC_BLOCK_TRANSFER_TIME_NS(
-					      data->blksz, ios->bus_width,
-					      ios->clock)));
-		}
+		if (dto > 14)
+			dto = 14;
 	}
 
 	reg &= ~DTO_MASK;
@@ -1618,6 +1609,12 @@ static void omap_hsmmc_start_dma_transfer(struct omap_hsmmc_host *host)
 	chan = omap_hsmmc_get_dma_chan(host, req->data);
 	dma_async_issue_pending(chan);
 
+	if (host->need_i834_errata) {
+		unsigned long timeout;
+
+		timeout = jiffies + nsecs_to_jiffies(host->data_timeout);
+		mod_timer(&host->timer, timeout);
+	}
 }
 
 /*
-- 
2.8.1

