From bba5383985ee07dc275a5cd8ba928fe642ce4921 Mon Sep 17 00:00:00 2001
From: Pillar Zuo <zuobaozhu@gmail.com>
Date: Tue, 12 Apr 2016 14:42:32 +0800
Subject: [PATCH] add: wilink8-bt

---
 sound/soc/codecs/Kconfig        |  4 ++
 sound/soc/codecs/Makefile       |  2 +
 sound/soc/codecs/wilink8-bt.c   | 84 +++++++++++++++++++++++++++++++++++
 sound/soc/davinci/Kconfig       |  8 +++-
 sound/soc/davinci/davinci-evm.c | 97 ++++++++++++++++++++++++++++++++++++++++-
 5 files changed, 192 insertions(+), 3 deletions(-)
 create mode 100644 sound/soc/codecs/wilink8-bt.c

diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 4d5915e..e526bb3 100644
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -83,6 +83,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_ML26124 if I2C
 	select SND_SOC_NAU8825 if I2C
 	select SND_SOC_HDMI_CODEC
+	select SND_SOC_WILINK8_BT
 	select SND_SOC_PCM1681 if I2C
 	select SND_SOC_PCM1792A if SPI_MASTER
 	select SND_SOC_PCM3008
@@ -460,6 +461,9 @@ config SND_SOC_HDMI_CODEC
        select SND_PCM_ELD
        select SND_PCM_IEC958
 
+config SND_SOC_WILINK8_BT
+	tristate "WILINK8 bluetooth audio"
+
 config SND_SOC_ES8328
 	tristate "Everest Semi ES8328 CODEC"
 
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index 49c1824..40d893b 100644
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -76,6 +76,7 @@ snd-soc-mc13783-objs := mc13783.o
 snd-soc-ml26124-objs := ml26124.o
 snd-soc-nau8825-objs := nau8825.o
 snd-soc-hdmi-codec-objs := hdmi-codec.o
+snd-soc-wilink8-bt-objs := wilink8-bt.o
 snd-soc-pcm1681-objs := pcm1681.o
 snd-soc-pcm1792a-codec-objs := pcm1792a.o
 snd-soc-pcm3008-objs := pcm3008.o
@@ -272,6 +273,7 @@ obj-$(CONFIG_SND_SOC_MC13783)	+= snd-soc-mc13783.o
 obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o
 obj-$(CONFIG_SND_SOC_NAU8825)   += snd-soc-nau8825.o
 obj-$(CONFIG_SND_SOC_HDMI_CODEC)	+= snd-soc-hdmi-codec.o
+obj-$(CONFIG_SND_SOC_WILINK8_BT) += snd-soc-wilink8-bt.o
 obj-$(CONFIG_SND_SOC_PCM1681)	+= snd-soc-pcm1681.o
 obj-$(CONFIG_SND_SOC_PCM1792A)	+= snd-soc-pcm1792a-codec.o
 obj-$(CONFIG_SND_SOC_PCM3008)	+= snd-soc-pcm3008.o
diff --git a/sound/soc/codecs/wilink8-bt.c b/sound/soc/codecs/wilink8-bt.c
new file mode 100644
index 0000000..02c2659
--- /dev/null
+++ b/sound/soc/codecs/wilink8-bt.c
@@ -0,0 +1,84 @@
+/*
+* ALSA SoC PCM5102a driver
+*
+* Author: 	 Josh Elliott, <jelliott@ti.com>
+* Copyright:	 Copyright:   (C) 2014	Texas Instruments
+*
+* Based on sound/soc/codecs/spdif_transmitter.c by Steve Chen
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 2 as
+* published by the Free Software Foundation.
+*/
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/slab.h>
+#include <sound/soc.h>
+#include <sound/pcm.h>
+#include <sound/initval.h>
+#include <linux/of.h>
+
+#define DRV_NAME "wilink8_bt"
+
+#define RATES		(SNDRV_PCM_RATE_8000 | SNDRV_PCM_RATE_16000 | SNDRV_PCM_RATE_48000)
+#define FORMATS		SNDRV_PCM_FMTBIT_S16_LE
+
+
+static struct snd_soc_codec_driver soc_codec_wilink8_bt = {
+};
+
+static struct snd_soc_dai_driver wilink8_bt_dai = {
+	.name		= "wilink8_bt-hifi",
+	.playback = {
+		.stream_name	= "Playback",
+		.channels_min	= 1,
+		.channels_max	= 2,
+		.rates		= RATES,
+		.formats	= FORMATS,
+	},
+	.capture = {
+		.stream_name	= "Capture",
+		.channels_min	= 1,
+		.channels_max	= 2,
+		.rates		= RATES,
+		.formats	= FORMATS,
+	},
+};
+
+static int wilink8_bt_probe(struct platform_device *pdev)
+{
+	return snd_soc_register_codec(&pdev->dev, &soc_codec_wilink8_bt,
+			&wilink8_bt_dai, 1);
+}
+
+static int wilink8_bt_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id wilink8_bt_dt_ids[] = {
+	{ .compatible = "ti,wilink8_bt", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, wilink8_bt_dt_ids);
+#endif
+
+static struct platform_driver wilink8_bt_driver = {
+	.probe		= wilink8_bt_probe,
+	.remove		= wilink8_bt_remove,
+	.driver		= {
+		.name	= DRV_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(wilink8_bt_dt_ids),
+	},
+};
+
+module_platform_driver(wilink8_bt_driver);
+
+MODULE_AUTHOR("Baozhu <zuobaozhu@gmail.com>");
+MODULE_DESCRIPTION("WILINK8_BT dummy codec driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRV_NAME);
diff --git a/sound/soc/davinci/Kconfig b/sound/soc/davinci/Kconfig
index 50ca291..cc2de4f 100644
--- a/sound/soc/davinci/Kconfig
+++ b/sound/soc/davinci/Kconfig
@@ -45,7 +45,13 @@ config SND_AM33XX_SOC_EVM
 	  boards using McASP and TLV320AIC3X codec. For example AM335X-EVM,
 	  AM335X-EVMSK, and BeagelBone with AudioCape boards have this
 	  setup.
-
+config SND_AM33XX_SOC_WILINK8_BT
+	tristate "SoC Audio support for WILINK8 PCM on Beaglebone Green Wrieless"
+	depends on SND_DAVINCI_SOC_GENERIC_EVM && SOC_AM33XX
+	select SND_SOC_WILINK8_BT
+	help
+	  Say Y or M if you want to add support for SoC audio on AM33XX
+	  evm board using McASP and WILINK8_BT.
 config SND_DAVINCI_SOC_EVM
 	tristate "SoC Audio support for DaVinci DM6446, DM355 or DM365 EVM"
 	depends on SND_EDMA_SOC && I2C
diff --git a/sound/soc/davinci/davinci-evm.c b/sound/soc/davinci/davinci-evm.c
index 731fb0d..8e73fe6 100644
--- a/sound/soc/davinci/davinci-evm.c
+++ b/sound/soc/davinci/davinci-evm.c
@@ -31,15 +31,16 @@ struct snd_soc_card_drvdata_davinci {
 
 static int evm_startup(struct snd_pcm_substream *substream)
 {
+	int ret = 0;
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_card *soc_card = rtd->card;
 	struct snd_soc_card_drvdata_davinci *drvdata =
 		snd_soc_card_get_drvdata(soc_card);
 
 	if (drvdata->mclk)
-		return clk_prepare_enable(drvdata->mclk);
+		ret = clk_prepare_enable(drvdata->mclk);
 
-	return 0;
+	return ret;
 }
 
 static void evm_shutdown(struct snd_pcm_substream *substream)
@@ -76,6 +77,80 @@ static int evm_hw_params(struct snd_pcm_substream *substream,
 
 	return 0;
 }
+static int wilink8_bt_hw_params(struct snd_pcm_substream *substream,
+				 struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	struct snd_soc_card *soc_card = rtd->card;
+	struct platform_device *pdev = to_platform_device(soc_card->dev);
+	unsigned sysclk = ((struct snd_soc_card_drvdata_davinci *)
+			   snd_soc_card_get_drvdata(soc_card))->sysclk;
+	int ret = 0;
+	int rate = params_rate(params);
+
+	if (rate == 16000) {
+		/*
+		 * Works with tdm-slots set to 5 in the DT:
+		 * 5 slots each with a word-length of 20 gives us 100
+		 * bits/frame.
+		 */
+		/* MCLK divider 24/3=8MHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 0, 3);
+		/* BCLK divider 8/5=1.6MHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, 5);
+		/* BCLK/FS ratio 1.6/100=16kHz FS */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 100);
+
+		/*
+		 * Works with tdm-slots set to 2 in the DT:
+		 * 2 slots each with a word-length of 30 gives us 60
+		 * bits/frame.
+		 *
+		 * ret = snd_soc_dai_set_clkdiv(cpu_dai, 0, 3);
+		 * ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, 5);
+		 * ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 100);
+		 */
+	}
+	else if (rate == 8000) {
+		/*
+		* Works with tdm-slots set to 5 in the DT:
+		* 5 slots each with a word-length of 20 gives us 100
+		* bits/frame.
+		*/
+		/* MCLK divider 24/3=8MHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 0, 3);
+		/* BCLK divider 8/10=800kHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, 10);
+		/* BCLK/FS ratio 800/100=8kHz FS */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 100);
+	}
+	else if (rate == 48000) {
+		/*
+		 * Works with tdm-slots set to 5 in the DT:
+		 * 5 slots each with a word-length of 20 gives us 100
+		 * bits/frame.
+		 */
+		/* MCLK divider 24/1=24MHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 0, 1);
+		/* BCLK divider 24/5=4.8MHz */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 1, 5);
+		/* BCLK/FS ratio 4.8/100=48kHz FS */
+		ret = snd_soc_dai_set_clkdiv(cpu_dai, 2, 100);
+	} else {
+		dev_err(&pdev->dev, "Unsupported rate\n");
+	}
+
+	if (ret < 0) {
+		dev_err(&pdev->dev, "can't set CPU DAI clock divider %d\n",
+			ret);
+		return ret;
+	}
+
+	ret = snd_soc_dai_set_sysclk(cpu_dai, 0, sysclk, SND_SOC_CLOCK_OUT);
+
+	return ret;
+}
 
 static struct snd_soc_ops evm_ops = {
 	.startup = evm_startup,
@@ -112,6 +187,11 @@ static const struct snd_soc_dapm_route audio_map[] = {
 	{"LINE1R", NULL, "Line In"},
 	{"LINE2R", NULL, "Line In"},
 };
+static struct snd_soc_ops wilink8_bt_ops = {
+	.startup = evm_startup,
+	.shutdown = evm_shutdown,
+	.hw_params = wilink8_bt_hw_params,
+};
 
 /* Logic for a aic3x as connected on a davinci-evm */
 static int evm_aic3x_init(struct snd_soc_pcm_runtime *rtd)
@@ -340,11 +420,24 @@ static struct snd_soc_dai_link evm_dai_tlv320aic3x = {
 		   SND_SOC_DAIFMT_IB_NF,
 };
 
+static struct snd_soc_dai_link evm_dai_wilink8_bt = {
+	.name		= "WILINK8_BT",
+	.stream_name	= "WILINK8",
+	.codec_dai_name	= "wilink8_bt-hifi",
+	.ops            = &wilink8_bt_ops,
+	.dai_fmt = (SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_NB_IF |
+			SND_SOC_DAIFMT_DSP_A),
+};
+
 static const struct of_device_id davinci_evm_dt_ids[] = {
 	{
 		.compatible = "ti,da830-evm-audio",
 		.data = (void *) &evm_dai_tlv320aic3x,
 	},
+	{
+		.compatible = "ti,wilink8-bt-audio",
+		.data = (void *) &evm_dai_wilink8_bt,
+	},
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, davinci_evm_dt_ids);
-- 
2.8.0.rc3

